{"version":3,"sources":["Drinks.js","LoadingSpinner.js","NameSearch.js","RandomSearch.js","App.js","serviceWorker.js","index.js"],"names":["Drinks","handleToggle","setState","plusButtonShown","checkButtonShown","state","className","key","this","props","src","image","alt","title","ingredients","map","ingredient","quantity","recipe","onClick","Component","LoadingSpinner","NameSearch","drinks","value","userInput","type","placeholder","onChange","handleChange","handleSubmit","loading","drink","strDrinkThumb","strDrink","strInstructions","idDrink","strIngredient1","strMeasure1","strIngredient2","strMeasure2","strIngredient3","strMeasure3","strIngredient4","strMeasure4","strIngredient5","strMeasure5","strIngredient6","strMeasure6","refreshPage","RandomSearch","App","handleNameSearch","random","searchByName","handleRandomSearch","axios","url","dataType","method","then","res","setTimeout","data","e","target","preventDefault","urlCallValue","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89f2e1a4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass Drinks extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tplusButtonShown: true,\n\t\t\tcheckButtonShown: false,\n\t\t}\n\t}\n\n\thandleToggle = () => {\n\t\tthis.setState({\n\t\t\tplusButtonShown: false,\n\t\t\t// plusButtonShown: this.state.plusButtonShown ? false : true,\n\t\t\tcheckButtonShown: true,\n\t\t\t// checkButtonShown: this.state.checkButtonShown ? false : true,\n\t\t})\n\t}\n\n    render() {\n        return(\n            <div className=\"drink animateBottom\" key={this.props.key}>\n\t\t\t\t\t\t\t\t<div className=\"drinkImage\">\n\t\t\t\t\t\t\t\t\t<img src={this.props.image} alt={this.props.title}/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"drinkDescription\">\n\t\t\t\t\t\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t\t\t\t\t\t<p>You will need:</p>\n\t\t\t\t\t\t\t\t\t<ul className=\"ingredients\">\n                                        {(this.props.ingredients.map(ingredient => {\n                                            return <li>{ingredient.ingredient ? ingredient.ingredient : null}{ingredient.quantity ? `: ${ingredient.quantity}` : null}</li>\n                                        }))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t<p>{this.props.recipe}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"saveButtons\">\n\t\t\t\t\t\t\t\t\t{this.state.plusButtonShown && <button className=\"saveBtn plusBtn\" onClick={this.handleToggle}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-plus\"></i>\n\t\t\t\t\t\t\t\t\t</button>}\n\n\t\t\t\t\t\t\t\t\t{this.state.checkButtonShown && <button className=\"saveBtn checkBtn\" onClick={this.handleToggle}>\n\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-check\"></i>\n\t\t\t\t\t\t\t\t\t</button>}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n        )\n    }\n}\n\nexport default Drinks;","import React, {Component} from 'react';\nimport './App.css';\n\nclass LoadingSpinner extends Component {\n    render() {\n        return (\n            <div className=\"loadingAnimation\">\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n        )\n    }\n}\n\nexport default LoadingSpinner","import React, {Component} from 'react';\nimport './App.css';\nimport Drinks from \"./Drinks\"\nimport LoadingSpinner from \"./LoadingSpinner\"\n\nclass NameSearch extends Component {\n\t// constructor() {\n\t// \tsuper();\n\t// \tthis.state = {\n\t// \t\tplusButtonShown: true,\n\t// \t\tcheckButtonShown: false,\n\t// \t}\n\t// }\n\n\t// handleToggle = () => {\n\t// \tthis.setState({\n\t// \t\tplusButtonShown: false,\n\t// \t\t// plusButtonShown: this.state.plusButtonShown ? false : true,\n\t// \t\tcheckButtonShown: true,\n\t// \t\t// checkButtonShown: this.state.checkButtonShown ? false : true,\n\t// \t})\n\t// }\n\n\trender() {\n\t\tif (this.props.drinks !== null) {\n\t\t\treturn(\n\t\t\t\t<div className=\"animateTop\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<input value={this.props.userInput} type=\"text\" placeholder=\"Enter cocktail name\" onChange={this.props.handleChange}/>\n\t\t\t\t\t\t<button className=\"menuBtn\" onClick={this.props.handleSubmit}>Give me that drink</button>\n\t\t\t\t\t</form>\n\n\t\t\t\t\t{this.props.loading ? <LoadingSpinner /> : this.props.drinks.map(drink => {\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t// <div className=\"drink animateBottom\" key={drink.idDrink}>\n\t\t\t\t\t\t\t// \t<div className=\"drinkImage\">\n\t\t\t\t\t\t\t// \t\t<img src={drink.strDrinkThumb} alt={drink.strDrink}/>\n\t\t\t\t\t\t\t// \t</div>\n\t\t\t\t\t\t\t// \t<div className=\"drinkDescription\">\n\t\t\t\t\t\t\t// \t\t<h2>{drink.strDrink}</h2>\n\t\t\t\t\t\t\t// \t\t<p>You will need:</p>\n\t\t\t\t\t\t\t// \t\t<ul className=\"ingredients\">\n\t\t\t\t\t\t\t// \t\t\t<li>{drink.strIngredient1 ? drink.strIngredient1 : null}{drink.strMeasure1 ? `: ${drink.strMeasure1}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t<li>{drink.strIngredient2 ? drink.strIngredient2 : null}{drink.strMeasure2 ? `: ${drink.strMeasure2}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t<li>{drink.strIngredient3 ? drink.strIngredient3 : null}{drink.strMeasure3 ? `: ${drink.strMeasure3}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t<li>{drink.strIngredient4 ? drink.strIngredient4 : null}{drink.strMeasure4 ? `: ${drink.strMeasure4}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t<li>{drink.strIngredient5 ? drink.strIngredient5 : null}{drink.strMeasure5 ? `: ${drink.strMeasure5}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t<li>{drink.strIngredient6 ? drink.strIngredient6 : null}{drink.strMeasure6 ? `: ${drink.strMeasure6}` : null}</li>\n\t\t\t\t\t\t\t// \t\t</ul>\n\t\t\t\t\t\t\t// \t\t<p>{drink.strInstructions}</p>\n\t\t\t\t\t\t\t// \t</div>\n\t\t\t\t\t\t\t// \t<div className=\"saveButtons\">\n\t\t\t\t\t\t\t// \t\t{this.props.plusButtonShown && <button className=\"saveBtn\" onClick={this.props.handleToggle}>\n\t\t\t\t\t\t\t// \t\t\t<i className=\"fas fa-plus\"></i>\n\t\t\t\t\t\t\t// \t\t</button>}\n\n\t\t\t\t\t\t\t// \t\t{this.props.checkButtonShown && <button className=\"saveBtn\" onClick={this.props.handleToggle}>\n\t\t\t\t\t\t\t// \t\t\t<i class=\"fas fa-check\"></i>\n\t\t\t\t\t\t\t// \t\t</button>}\n\t\t\t\t\t\t\t// \t</div>\n\t\t\t\t\t\t\t// </div>\n\t\t\t\t\t\t\t<Drinks  \n\t\t\t\t\t\t\t\timage={drink.strDrinkThumb} \n\t\t\t\t\t\t\t\ttitle={drink.strDrink} \n\t\t\t\t\t\t\t\trecipe={drink.strInstructions} \n\t\t\t\t\t\t\t\tkey={drink.idDrink} \n\t\t\t\t\t\t\t\tplusButtonShown={this.props.plusButtonShown} \n\t\t\t\t\t\t\t\tcheckButtonShown={this.props.checkButtonShown} \n\t\t\t\t\t\t\t\thandleToggle={this.props.handleToggle} \n\t\t\t\t\t\t\t\tingredients={[{ingredient: drink.strIngredient1, quantity: drink.strMeasure1}, {ingredient: drink.strIngredient2, quantity: drink.strMeasure2}, {ingredient: drink.strIngredient3, quantity: drink.strMeasure3}, {ingredient: drink.strIngredient4, quantity: drink.strMeasure4}, {ingredient: drink.strIngredient5, quantity: drink.strMeasure5}, {ingredient: drink.strIngredient6, quantity: drink.strMeasure6}]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn(\n\t\t\t\t<div className=\"errorDescription\">\n\t\t\t\t\t<h2>Unfortunately, I don't recognize this drink :(</h2>\n\t\t\t\t\t<button className=\"menuBtn\" onClick={this.props.refreshPage}>Try another one</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default NameSearch","import React, {Component} from 'react';\nimport './App.css';\nimport Drinks from \"./Drinks\"\nimport LoadingSpinner from \"./LoadingSpinner\"\n\nclass RandomSearch extends Component {\n\n\trender() {\n\t\t\n\t\t// if(this.props.drinks !== null) {\n\t\t\treturn(\n\t\t\t\t<div className=\"animateBottom\">\n\t\t\t\t\t{this.props.loading ? <LoadingSpinner /> : this.props.drinks.map(drink => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t// <div className=\"drink\" key={drink.idDrink}>\n\t\t\t\t\t\t\t// \t<div className=\"drinkImage\">\n\t\t\t\t\t\t\t// \t\t<img src={drink.strDrinkThumb} alt={drink.strDrink}/>\n\t\t\t\t\t\t\t// \t</div>\n\t\t\t\t\t\t\t// \t<div className=\"drinkDescription\">\n\t\t\t\t\t\t\t// \t\t<h2>{drink.strDrink}</h2>\n\t\t\t\t\t\t\t// \t\t<p>You will need:</p>\n\t\t\t\t\t\t\t// \t\t<ul className=\"ingredients\">\n\t\t\t\t\t\t\t// \t\t\t\t<li>{drink.strIngredient1 ? drink.strIngredient1 : null}{drink.strMeasure1 ? `: ${drink.strMeasure1}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t\t<li>{drink.strIngredient2 ? drink.strIngredient2 : null}{drink.strMeasure2 ? `: ${drink.strMeasure2}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t\t<li>{drink.strIngredient3 ? drink.strIngredient3 : null}{drink.strMeasure3 ? `: ${drink.strMeasure3}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t\t<li>{drink.strIngredient4 ? drink.strIngredient4 : null}{drink.strMeasure4 ? `: ${drink.strMeasure4}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t\t<li>{drink.strIngredient5 ? drink.strIngredient5 : null}{drink.strMeasure5 ? `: ${drink.strMeasure5}` : null}</li>\n\t\t\t\t\t\t\t// \t\t\t\t<li>{drink.strIngredient6 ? drink.strIngredient6 : null}{drink.strMeasure6 ? `: ${drink.strMeasure6}` : null}</li>\n\t\t\t\t\t\t\t// \t\t</ul>\n\t\t\t\t\t\t\t// \t\t<p>{drink.strInstructions}</p>\n\t\t\t\t\t\t\t// \t</div>\n\t\t\t\t\t\t\t// \t<div className=\"saveButtons\">\n\t\t\t\t\t\t\t// \t\t<button className=\"saveBtn\">\n\t\t\t\t\t\t\t// \t\t\t<i className=\"fas fa-plus\"></i>\n\t\t\t\t\t\t\t// \t\t</button>\n\t\t\t\t\t\t\t// \t\t<button className=\"saveBtn\">\n\t\t\t\t\t\t\t// \t\t\t<i class=\"fas fa-check\"></i>\n\t\t\t\t\t\t\t// \t\t</button>\n\t\t\t\t\t\t\t// \t</div>\n\t\t\t\t\t\t\t// </div>\n\n\t\t\t\t\t\t\t<Drinks  \n\t\t\t\t\t\t\t\timage={drink.strDrinkThumb} \n\t\t\t\t\t\t\t\ttitle={drink.strDrink} \n\t\t\t\t\t\t\t\trecipe={drink.strInstructions} \n\t\t\t\t\t\t\t\tkey={drink.idDrink} \n\t\t\t\t\t\t\t\tplusButtonShown={this.props.plusButtonShown} \n\t\t\t\t\t\t\t\tcheckButtonShown={this.props.checkButtonShown} \n\t\t\t\t\t\t\t\thandleToggle={this.props.handleToggle} \n\t\t\t\t\t\t\t\tingredients={[{ingredient: drink.strIngredient1, quantity: drink.strMeasure1}, {ingredient: drink.strIngredient2, quantity: drink.strMeasure2}, {ingredient: drink.strIngredient3, quantity: drink.strMeasure3}, {ingredient: drink.strIngredient4, quantity: drink.strMeasure4}, {ingredient: drink.strIngredient5, quantity: drink.strMeasure5}, {ingredient: drink.strIngredient6, quantity: drink.strMeasure6}]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)\n\t\t// } else {\n\t\t// \t\treturn(\n\t\t// \t\t\t<div>\n\t\t// \t\t\t\t<h2 className=\"errorDescription\">Unfortunately, I don't recognize this drink :(</h2>\n\t\t// \t\t\t\t<button className=\"menuBtn\" onClick={this.props.refreshPage}>Try another one</button>\n\t\t// \t\t\t</div>\n\t\t// \t\t)\n\t\t// \t}\n\t}\n}\n\nexport default RandomSearch","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport NameSearch from './NameSearch'\nimport RandomSearch from './RandomSearch'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      searchByName: false,\n      random: false,\n      userInput: '',\n      drinks: [],\n      ingredients: [],\n      loading: false,\n    }\n  }\n\n  handleNameSearch = () => {\n    this.setState({\n      drinks: [],\n      ingredients: [],\n      random: false,\n      searchByName: true,\n      userInput: '',\n      plusButtonShown: true,\n\t\t\tcheckButtonShown: false,\n    })  \n  }\n\n  handleRandomSearch = () => {\n    this.setState({\n      drinks: [],\n      searchByName: false,\n      random: true,\n      plusButtonShown: true,\n      checkButtonShown: false,\n      loading: true,\n    })\n    axios({\n      url: `https://www.thecocktaildb.com/api/json/v1/1/random.php`,\n      dataType: 'json',\n      method: 'GET'\n    }).then((res) => {\n      \n      setTimeout( () => {\n        this.setState({\n          drinks: res.data.drinks,\n          userInput: '',\n          loading: false\n        })\n      }, 1000)\n\n      // this.setState({\n      //   drinks: res.data.drinks\n      // })\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      drinks: [],\n      loading: true,\n    })\n\n    let urlCallValue = '';\n    if (this.state.searchByName) {\n      urlCallValue = 'search.php?s='\n    } \n    // else if (this.state.searchByIngredient) {\n    //   urlCallValue = 'filter.php?i='\n    // } \n    else if (this.state.random) {\n      urlCallValue = 'random.php'\n    }\n\n    axios({\n      url: `https://www.thecocktaildb.com/api/json/v1/1/${urlCallValue}${this.state.userInput}`,\n      dataType: 'json',\n      method: 'GET'\n    }).then((res) => {\n      setTimeout( () => {\n        this.setState({\n          drinks: res.data.drinks,\n          userInput: '',\n          loading: false\n        })\n      }, 1000\n\n      )\n      // this.setState({\n      //   drinks: res.data.drinks,\n      //   userInput: '',\n      //   loading: false\n      // })\n    })\n  }\n\n  refreshPage = () => {\n    window.location.reload();\n\t}\n\n  render () {\n    return (\n      <div className=\"app wrapper\">\n        <h1>Let me get you a drink</h1>\n        {/* <p className=\"greeting\">Hello there! Tonight, I am your bartender. I know lots and lots of cool cocktail recipes. All you need to do is let me know what you feel like toinght and I will come up with the drink to spice up you evening.</p> */}\n        {/* <p className=\"greeting\">Let me get you a drink!</p> */}\n\n        <div className=\"menuButtons\">\n          <button className=\"menuBtn\" onClick={this.handleNameSearch}>I know what I want</button>\n          <button className=\"menuBtn\" onClick={this.handleRandomSearch}>I am in the mood for anything</button>\n        </div>\n\n        {this.state.searchByName ? <NameSearch userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} drinks={this.state.drinks} refreshPage={this.refreshPage} handleToggle={this.handleToggle} plusButtonShown={this.state.plusButtonShown} checkButtonShown={this.state.checkButtonShown} loading={this.state.loading}/> : null}\n        \n        {this.state.random ? <RandomSearch drinks={this.state.drinks} refreshPage={this.refreshPage} plusButtonShown={this.state.plusButtonShown} checkButtonShown={this.state.checkButtonShown} handleToggle={this.handleToggle} loading={this.state.loading}/> : null}\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}